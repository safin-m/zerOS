[tasks.create_bin_dir]
condition = { platforms = ["linux", "mac"] }
script = ["mkdir -p bin"]

[tasks.create_build_dir]
condition = { platforms = ["linux", "mac"] }
script = ["mkdir -p build"]

[tasks.boot_assembly_to_binary]
dependencies = ["create_bin_dir"]
command = "nasm"
args = ["-f", "bin", "./src/boot/boot.asm", "-o", "./bin/boot.bin"]

[tasks.kernel_assembly_to_object]
dependencies = ["create_build_dir"]
command = "nasm"
args = ["-f", "elf64", "-g", "./src/kernel.asm", "-o", "./build/kernel.asm.o"]

[tasks.compile_rust_kernel]
dependencies = ["create_build_dir"]
script = [
    "cargo build --release",
    "cp target/x86_64-unknown-none/release/libzer_os.a ./build/rust_kernel.o"
]

[tasks.kernel_object_to_binary]
dependencies = ["kernel_assembly_to_object", "compile_rust_kernel"]
script = [
    "x86_64-elf-ld -g -r ./build/kernel.asm.o ./build/rust_kernel.o -o ./build/kernelfull.o",
    "x86_64-elf-gcc -T ./src/linker.ld -o ./bin/kernel.bin -ffreestanding -O0 -nostdlib ./build/kernelfull.o",
]

[tasks.start]
dependencies = ["clean_all", "os_assemble"]

[tasks.os_assemble]
dependencies = ["boot_assembly_to_binary", "kernel_object_to_binary"]
condition = { platforms = ["linux", "mac"] }
script = [
    "rm -rf ./bin/os.bin",
    "dd if=./bin/boot.bin >> ./bin/os.bin",
    "dd if=./bin/kernel.bin >> ./bin/os.bin",
    "dd if=/dev/zero bs=512 count=100 >> ./bin/os.bin"
    ]

[tasks.clean_all]
condition = { platforms = ["linux", "mac"] }
script = [
    "echo 'Cleaning build directory...'",
    "test -d ./build && rm -rf ./build || echo 'Build directory does not exist'",
    "echo 'Cleaning target directory...'",
    "test -d ./target && rm -rf ./target || echo 'Target directory does not exist'",
    "echo 'Cleaning bin directory...'",
    "test -d ./bin && rm -rf ./bin || echo 'Bin directory does not exist'"
]
